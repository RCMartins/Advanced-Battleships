/* Generated By:JavaCC: Do not edit this line. ParserGameModesTokenManager.java */
package pt.rmartins.battleships.parser.gamemodes;

/** Token Manager. */
public class ParserGameModesTokenManager implements ParserGameModesConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x10000L) != 0L)
				return 1;
			if ((active0 & 0x3fffffffff00000L) != 0L) {
				jjmatchedKind = 59;
				return 3;
			}
			if ((active0 & 0x4000L) != 0L)
				return 5;
			return -1;
		case 1:
			if ((active0 & 0x3fffffffff00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 1;
				return 3;
			}
			return -1;
		case 2:
			if ((active0 & 0x3fffffffff00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 2;
				return 3;
			}
			return -1;
		case 3:
			if ((active0 & 0x82000200000L) != 0L)
				return 3;
			if ((active0 & 0x3fff7dfffd00000L) != 0L) {
				if (jjmatchedPos != 3) {
					jjmatchedKind = 59;
					jjmatchedPos = 3;
				}
				return 3;
			}
			return -1;
		case 4:
			if ((active0 & 0x3f7ffdfffd00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 4;
				return 3;
			}
			if ((active0 & 0x8000000000000L) != 0L)
				return 3;
			return -1;
		case 5:
			if ((active0 & 0x10000018400000L) != 0L)
				return 3;
			if ((active0 & 0x3e7ffdfe7900000L) != 0L) {
				if (jjmatchedPos != 5) {
					jjmatchedKind = 59;
					jjmatchedPos = 5;
				}
				return 3;
			}
			return -1;
		case 6:
			if ((active0 & 0x3e5fddfe5c00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 6;
				return 3;
			}
			if ((active0 & 0x2020002100000L) != 0L)
				return 3;
			return -1;
		case 7:
			if ((active0 & 0x3e1dddfc5c00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 7;
				return 3;
			}
			if ((active0 & 0x4200020000000L) != 0L)
				return 3;
			return -1;
		case 8:
			if ((active0 & 0x3c1dcd045c00000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 8;
				return 3;
			}
			if ((active0 & 0x20010f80000000L) != 0L)
				return 3;
			return -1;
		case 9:
			if ((active0 & 0x3c14c0004800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 9;
				return 3;
			}
			if ((active0 & 0x90d041400000L) != 0L)
				return 3;
			return -1;
		case 10:
			if ((active0 & 0x1400000000000L) != 0L)
				return 3;
			if ((active0 & 0x3c00c0004800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 10;
				return 3;
			}
			return -1;
		case 11:
			if ((active0 & 0x200080004000000L) != 0L)
				return 3;
			if ((active0 & 0x1c0040000800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 11;
				return 3;
			}
			return -1;
		case 12:
			if ((active0 & 0x40000000800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 12;
				return 3;
			}
			if ((active0 & 0x180040000000000L) != 0L)
				return 3;
			return -1;
		case 13:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 13;
				return 3;
			}
			if ((active0 & 0x40000000000000L) != 0L)
				return 3;
			return -1;
		case 14:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 14;
				return 3;
			}
			return -1;
		case 15:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 15;
				return 3;
			}
			return -1;
		case 16:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 16;
				return 3;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 37:
			return jjStopAtPos(0, 19);
		case 40:
			return jjStopAtPos(0, 5);
		case 41:
			return jjStopAtPos(0, 6);
		case 42:
			return jjStopAtPos(0, 17);
		case 43:
			return jjStopAtPos(0, 15);
		case 44:
			return jjStopAtPos(0, 12);
		case 45:
			return jjStartNfaWithStates_0(0, 16, 1);
		case 46:
			return jjStartNfaWithStates_0(0, 14, 5);
		case 47:
			return jjStopAtPos(0, 18);
		case 58:
			return jjStopAtPos(0, 13);
		case 59:
			return jjStopAtPos(0, 11);
		case 65:
			return jjMoveStringLiteralDfa1_0(0x280000000000000L);
		case 66:
			return jjMoveStringLiteralDfa1_0(0x200000000L);
		case 67:
			return jjMoveStringLiteralDfa1_0(0x1000000L);
		case 68:
			return jjMoveStringLiteralDfa1_0(0x104000000000L);
		case 69:
			return jjMoveStringLiteralDfa1_0(0x160000c00000000L);
		case 70:
			return jjMoveStringLiteralDfa1_0(0x1040000000L);
		case 71:
			return jjMoveStringLiteralDfa1_0(0x2000000000000L);
		case 72:
			return jjMoveStringLiteralDfa1_0(0x4000000200000L);
		case 73:
			return jjMoveStringLiteralDfa1_0(0x800000L);
		case 75:
			return jjMoveStringLiteralDfa1_0(0x82000000000L);
		case 77:
			return jjMoveStringLiteralDfa1_0(0x1200004000000L);
		case 78:
			return jjMoveStringLiteralDfa1_0(0x4001a400000L);
		case 82:
			return jjMoveStringLiteralDfa1_0(0x20000000000L);
		case 83:
			return jjMoveStringLiteralDfa1_0(0x18000000000000L);
		case 84:
			return jjMoveStringLiteralDfa1_0(0x80a0000000L);
		case 85:
			return jjMoveStringLiteralDfa1_0(0x410100000000L);
		case 86:
			return jjMoveStringLiteralDfa1_0(0x100000L);
		case 87:
			return jjMoveStringLiteralDfa1_0(0x800000000000L);
		case 91:
			return jjStopAtPos(0, 7);
		case 93:
			return jjStopAtPos(0, 8);
		case 123:
			return jjStopAtPos(0, 9);
		case 125:
			return jjStopAtPos(0, 10);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x140020001000000L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x200004100000L);
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x8830a0200000L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x200010000000000L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x80400100800000L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x714420a400000L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000c00000000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 87:
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
		case 99:
			return jjMoveStringLiteralDfa3_0(active0, 0x140800000000000L);
		case 100:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000800000L);
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
		case 103:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x18008000000000L);
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x204082140000000L);
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0x1200a1000000L);
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x1000200000000L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L);
		case 114:
			return jjMoveStringLiteralDfa3_0(active0, 0x1008500000L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x400004000000L);
		case 116:
			return jjMoveStringLiteralDfa3_0(active0, 0x10c02200000L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
		case 121:
			return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
		case 68:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x240000000000L);
		case 98:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
		case 101:
			return jjMoveStringLiteralDfa4_0(active0, 0x100000a1800000L);
		case 104:
			return jjMoveStringLiteralDfa4_0(active0, 0x140000002000000L);
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x100100000000L);
		case 107:
			return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
		case 108:
			if ((active0 & 0x2000000000L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x22080050000000L);
		case 109:
			return jjMoveStringLiteralDfa4_0(active0, 0x8400000L);
		case 112:
			return jjMoveStringLiteralDfa4_0(active0, 0x8028000000000L);
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0x10c00000000L);
		case 115:
			if ((active0 & 0x200000L) != 0L)
				return jjStartNfaWithStates_0(3, 21, 3);
			return jjMoveStringLiteralDfa4_0(active0, 0x1001004100000L);
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
		case 121:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
		case 68:
			return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
		case 75:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
		case 76:
			return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
		case 83:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000060000000L);
		case 97:
			return jjMoveStringLiteralDfa5_0(active0, 0x30c1c400000L);
		case 101:
			return jjMoveStringLiteralDfa5_0(active0, 0x200800000000000L);
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x2080002100000L);
		case 108:
			return jjMoveStringLiteralDfa5_0(active0, 0x9000c000000000L);
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x20400000000000L);
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
		case 115:
			if ((active0 & 0x8000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 51, 3);
			return jjMoveStringLiteralDfa5_0(active0, 0x200800000L);
		case 116:
			return jjMoveStringLiteralDfa5_0(active0, 0x1041000000000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 66:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
		case 75:
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
		case 80:
			return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
		case 84:
			return jjMoveStringLiteralDfa6_0(active0, 0xc00000000L);
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x200100021000000L);
		case 100:
			if ((active0 & 0x10000000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 52, 3);
			return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
		case 101:
			return jjMoveStringLiteralDfa6_0(active0, 0x10104c000000000L);
		case 103:
			return jjMoveStringLiteralDfa6_0(active0, 0x20004000000L);
		case 104:
			return jjMoveStringLiteralDfa6_0(active0, 0x4000040000000L);
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x80200180000000L);
		case 107:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
		case 108:
			if ((active0 & 0x8000000L) != 0L) {
				jjmatchedKind = 27;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x40000000400000L);
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0x80002000000L);
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
		case 112:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
		case 115:
			return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
		case 116:
			return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
		case 121:
			if ((active0 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(5, 28, 3);
			break;
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 75:
			return jjMoveStringLiteralDfa7_0(active0, 0xc000000000L);
		case 83:
			return jjMoveStringLiteralDfa7_0(active0, 0x800001400000L);
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
		case 100:
			return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
		case 101:
			if ((active0 & 0x20000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 41, 3);
			else if ((active0 & 0x2000000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 49, 3);
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
		case 103:
			if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(6, 25, 3);
			return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x64010440000000L);
		case 108:
			return jjMoveStringLiteralDfa7_0(active0, 0x201200000000L);
		case 109:
			return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
		case 110:
			if ((active0 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(6, 20, 3);
			break;
		case 112:
			return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0x1040000800000L);
		case 116:
			return jjMoveStringLiteralDfa7_0(active0, 0x100100000000L);
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
		case 118:
			return jjMoveStringLiteralDfa7_0(active0, 0x80000020000000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 73:
			return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
		case 75:
			return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
		case 83:
			return jjMoveStringLiteralDfa8_0(active0, 0x200080000000000L);
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0x400200000000L);
		case 100:
			return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
		case 101:
			if ((active0 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(7, 29, 3);
			return jjMoveStringLiteralDfa8_0(active0, 0x80000140000000L);
		case 104:
			return jjMoveStringLiteralDfa8_0(active0, 0x1400000L);
		case 105:
			return jjMoveStringLiteralDfa8_0(active0, 0x90c080000000L);
		case 108:
			if ((active0 & 0x200000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 45, 3);
			return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
		case 109:
			return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
		case 114:
			return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
		case 115:
			return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
		case 116:
			if ((active0 & 0x4000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 50, 3);
			break;
		case 117:
			return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
		case 118:
			return jjMoveStringLiteralDfa8_0(active0, 0x60000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 77:
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
		case 83:
			return jjMoveStringLiteralDfa9_0(active0, 0x180000000000000L);
		case 98:
			return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
		case 99:
			return jjMoveStringLiteralDfa9_0(active0, 0x800000800000L);
		case 100:
			if ((active0 & 0x100000000L) != 0L)
				return jjStartNfaWithStates_0(8, 32, 3);
			break;
		case 101:
			if ((active0 & 0x400000000L) != 0L)
				return jjStartNfaWithStates_0(8, 34, 3);
			else if ((active0 & 0x20000000000000L) != 0L)
				return jjStartNfaWithStates_0(8, 53, 3);
			return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
		case 104:
			return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
		case 105:
			return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
		case 108:
			if ((active0 & 0x10000000000L) != 0L)
				return jjStartNfaWithStates_0(8, 40, 3);
			return jjMoveStringLiteralDfa9_0(active0, 0xc040000000L);
		case 110:
			if ((active0 & 0x800000000L) != 0L)
				return jjStartNfaWithStates_0(8, 35, 3);
			return jjMoveStringLiteralDfa9_0(active0, 0x140000000000L);
		case 111:
			return jjMoveStringLiteralDfa9_0(active0, 0x1001400000L);
		case 112:
			return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
		case 116:
			if ((active0 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(8, 31, 3);
			break;
		case 121:
			if ((active0 & 0x200000000L) != 0L)
				return jjStartNfaWithStates_0(8, 33, 3);
			break;
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(7, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0);
			return 9;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L);
		case 83:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L);
		case 100:
			if ((active0 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(9, 30, 3);
			else if ((active0 & 0x1000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 36, 3);
			break;
		case 103:
			if ((active0 & 0x100000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 44, 3);
			break;
		case 104:
			return jjMoveStringLiteralDfa10_0(active0, 0x180000000000000L);
		case 107:
			if ((active0 & 0x800000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 47, 3);
			break;
		case 108:
			if ((active0 & 0x4000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 38, 3);
			else if ((active0 & 0x8000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 39, 3);
			return jjMoveStringLiteralDfa10_0(active0, 0x1400000000000L);
		case 111:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000004000000L);
		case 114:
			return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
		case 116:
			if ((active0 & 0x400000L) != 0L)
				return jjStartNfaWithStates_0(9, 22, 3);
			else if ((active0 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(9, 24, 3);
			return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0);
			return 10;
		}
		switch (curChar) {
		case 82:
			return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
		case 100:
			return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
		case 101:
			if ((active0 & 0x400000000000L) != 0L)
				return jjStartNfaWithStates_0(10, 46, 3);
			return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L);
		case 104:
			return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
		case 105:
			return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
		case 108:
			if ((active0 & 0x1000000000000L) != 0L)
				return jjStartNfaWithStates_0(10, 48, 3);
			break;
		case 111:
			return jjMoveStringLiteralDfa11_0(active0, 0x180000000000000L);
		case 116:
			return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0);
			return 11;
		}
		switch (curChar) {
		case 98:
			return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
		case 101:
			if ((active0 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(11, 26, 3);
			else if ((active0 & 0x80000000000L) != 0L)
				return jjStartNfaWithStates_0(11, 43, 3);
			break;
		case 111:
			return jjMoveStringLiteralDfa12_0(active0, 0x40040000000000L);
		case 115:
			if ((active0 & 0x200000000000000L) != 0L)
				return jjStartNfaWithStates_0(11, 57, 3);
			break;
		case 116:
			return jjMoveStringLiteralDfa12_0(active0, 0x180000000000000L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0);
	}

	private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(10, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0);
			return 12;
		}
		switch (curChar) {
		case 108:
			return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
		case 115:
			if ((active0 & 0x80000000000000L) != 0L)
				return jjStartNfaWithStates_0(12, 55, 3);
			else if ((active0 & 0x100000000000000L) != 0L)
				return jjStartNfaWithStates_0(12, 56, 3);
			break;
		case 116:
			return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L);
		case 119:
			if ((active0 & 0x40000000000L) != 0L)
				return jjStartNfaWithStates_0(12, 42, 3);
			break;
		default:
			break;
		}
		return jjStartNfa_0(11, active0);
	}

	private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(11, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0);
			return 13;
		}
		switch (curChar) {
		case 101:
			return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
		case 115:
			if ((active0 & 0x40000000000000L) != 0L)
				return jjStartNfaWithStates_0(13, 54, 3);
			break;
		default:
			break;
		}
		return jjStartNfa_0(12, active0);
	}

	private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(12, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0);
			return 14;
		}
		switch (curChar) {
		case 83:
			return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(13, active0);
	}

	private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(13, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0);
			return 15;
		}
		switch (curChar) {
		case 104:
			return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(14, active0);
	}

	private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(14, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, active0);
			return 16;
		}
		switch (curChar) {
		case 111:
			return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(15, active0);
	}

	private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(15, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, active0);
			return 17;
		}
		switch (curChar) {
		case 116:
			if ((active0 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(17, 23, 3);
			break;
		default:
			break;
		}
		return jjStartNfa_0(16, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 12;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 58)
								kind = 58;
							jjCheckNAddStates(0, 3);
						} else if (curChar == 46)
							jjCheckNAdd(5);
						else if (curChar == 45)
							jjCheckNAdd(1);
						break;
					case 1:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 58)
							kind = 58;
						jjCheckNAdd(1);
						break;
					case 3:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 59)
							kind = 59;
						jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 4:
						if (curChar == 46)
							jjCheckNAdd(5);
						break;
					case 5:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjCheckNAdd(5);
						break;
					case 6:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 58)
							kind = 58;
						jjCheckNAddStates(0, 3);
						break;
					case 7:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 58)
							kind = 58;
						jjCheckNAdd(7);
						break;
					case 8:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(8, 9);
						break;
					case 9:
						if (curChar == 46)
							jjCheckNAdd(10);
						break;
					case 10:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjCheckNAdd(10);
						break;
					case 11:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 62)
							kind = 62;
						jjCheckNAdd(11);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
					case 3:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 59)
							kind = 59;
						jjCheckNAdd(3);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 7, 8, 9, 11, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, "\50", "\51", "\133", "\135",
			"\173", "\175", "\73", "\54", "\72", "\56", "\53", "\55", "\52", "\57", "\45",
			"\126\145\162\163\151\157\156", "\110\151\164\163", "\116\157\162\155\141\154\123\150\157\164",
			"\111\156\144\145\163\164\162\165\143\164\151\142\154\145\123\150\157\164",
			"\103\141\155\145\162\141\123\150\157\164", "\116\157\164\150\151\156\147",
			"\115\145\163\163\141\147\145\163\115\157\144\145", "\116\157\162\155\141\154", "\116\104\145\154\141\171",
			"\124\151\155\145\123\141\166\145", "\106\165\154\154\123\150\151\145\154\144",
			"\124\151\155\145\114\151\155\151\164", "\125\156\154\151\155\151\164\145\144",
			"\102\157\156\165\163\120\154\141\171", "\105\170\164\162\141\124\151\155\145",
			"\105\170\164\162\141\124\165\162\156", "\106\151\162\163\164\102\154\157\157\144", "\113\151\154\154",
			"\104\157\165\142\154\145\113\151\154\154", "\124\162\151\160\154\145\113\151\154\154",
			"\125\154\164\162\141\113\151\154\154", "\122\141\155\160\141\147\145",
			"\116\157\127\141\164\145\162\111\156\101\122\157\167", "\113\151\154\154\151\156\147\123\160\162\145\145",
			"\104\157\155\151\156\141\164\151\156\147", "\115\145\147\141\113\151\154\154",
			"\125\156\163\164\157\160\160\141\142\154\145", "\127\151\143\153\145\144\123\151\143\153",
			"\115\157\156\163\164\145\162\113\151\154\154", "\107\157\144\154\151\153\145",
			"\110\157\154\171\123\150\151\164", "\123\150\151\160\163", "\123\150\151\145\154\144",
			"\105\170\160\154\157\163\151\166\145", "\105\141\143\150\101\154\151\166\145\123\150\157\164\163",
			"\101\156\171\101\154\151\166\145\123\150\157\164\163",
			"\105\141\143\150\104\145\141\144\123\150\157\164\163", "\101\154\154\104\145\141\144\123\150\157\164\163",
			null, null, null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x4fffffffffffffe1L, };
	static final long[] jjtoSkip = { 0x1eL, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[12];
	private final int[] jjstateSet = new int[24];
	protected char curChar;

	/** Constructor. */
	public ParserGameModesTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public ParserGameModesTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 12; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}

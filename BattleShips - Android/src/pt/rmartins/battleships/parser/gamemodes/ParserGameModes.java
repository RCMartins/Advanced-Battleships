/* Generated By:JavaCC: Do not edit this line. ParserGameModes.java */
package pt.rmartins.battleships.parser.gamemodes;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.List;
import java.util.ArrayList;

import android.util.Log;

import pt.rmartins.battleships.objects.ShipClass;
import pt.rmartins.battleships.objects.PlayerClass.Shot.KindShot;
import pt.rmartins.battleships.objects.modes.GameBonus;
import pt.rmartins.battleships.objects.modes.GameMode;
import pt.rmartins.battleships.objects.modes.GameMode.MessagesMode;
import pt.rmartins.battleships.objects.modes.GameMode.BonusPlay;
import pt.rmartins.battleships.objects.modes.GameMode.BonusPlay.ConditionType;

public class ParserGameModes implements ParserGameModesConstants {

        public static List<GameMode> parseGameModes(String s)
        {
                return parseGameModes(new ByteArrayInputStream(s.getBytes()));
        }

        public static List<GameMode> parseGameModes(InputStream in)
        {
                ParserGameModes parser = new ParserGameModes(in);
                try {
                        return parser.main();
                }catch(Exception e){
                    Log.e("Error reading game modes file", e.getMessage());
                        return new ArrayList<GameMode>(0);
                }
        }

  final public List<GameMode> main() throws ParseException {
  List<GameMode> list; GameMode gameMode; int version;
  Token t;
    list = new ArrayList<GameMode>();
    version = 1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
        jj_consume_token(VERSION);
        jj_consume_token(DDOT);
        t = jj_consume_token(NUM);
        jj_consume_token(SEMICOLON);
                                                     version = Integer.parseInt(t.image);
        break;
      case ID:
        t = jj_consume_token(ID);
        jj_consume_token(LBRA);
        gameMode = readGameMode(t.image);
        jj_consume_token(RBRA);
                                                                    list.add(gameMode);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public GameMode readGameMode(String modeName) throws ParseException {
  GameMode mode; Token t;
    mode = new GameMode();
    mode.setName(modeName);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HITS:
      case MESSAGES_MODE:
      case TIME_SAVE:
      case FULL_SHIELD:
      case TIME_LIMIT:
      case BONUS_PLAY:
      case SHIPS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HITS:
        jj_consume_token(HITS);
        jj_consume_token(DDOT);
        readShots(mode);
        jj_consume_token(SEMICOLON);
        break;
      case MESSAGES_MODE:
        jj_consume_token(MESSAGES_MODE);
        jj_consume_token(DDOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NORMAL:
          jj_consume_token(NORMAL);
                     mode.setShowKind(MessagesMode.NORMAL);
          break;
        case NDELAY:
          jj_consume_token(NDELAY);
          t = jj_consume_token(NUM);
                                 mode.setShowKind(MessagesMode.NDELAY); mode.setShowKindParameters(Integer.parseInt(t.image));
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        break;
      case TIME_SAVE:
        jj_consume_token(TIME_SAVE);
        jj_consume_token(DDOT);
        t = jj_consume_token(DECIMAL);
                                             mode.setTimeSave(Double.parseDouble(t.image));
        jj_consume_token(SEMICOLON);
        break;
      case FULL_SHIELD:
        jj_consume_token(FULL_SHIELD);
        jj_consume_token(DDOT);
        t = jj_consume_token(DECIMAL);
                                               mode.setFullShield(Float.parseFloat(t.image));
        jj_consume_token(SEMICOLON);
        break;
      case TIME_LIMIT:
        jj_consume_token(TIME_LIMIT);
        jj_consume_token(DDOT);
        readTimeLimit(mode);
        jj_consume_token(SEMICOLON);
        break;
      case BONUS_PLAY:
        jj_consume_token(BONUS_PLAY);
        jj_consume_token(LBRA);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FIRST_BLOOD:
          case KILL:
          case DOUBLE_KILL:
          case TRIPLE_KILL:
          case ULTRA_KILL:
          case RAMPAGE:
          case NO_WATER_IN_A_ROW:
          case KILLING_SPREE:
          case DOMINATING:
          case MEGA_KILL:
          case UNSTOPPABLE:
          case WICKED_SICK:
          case MONSTER_KILL:
          case GODLIKE:
          case HOLY_SHIT:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          bonusPlay(mode);
        }
        jj_consume_token(RBRA);
        break;
      case SHIPS:
        jj_consume_token(SHIPS);
        jj_consume_token(LBRA);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          ships(mode);
        }
        jj_consume_token(RBRA);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return mode;}
    throw new Error("Missing return statement in function");
  }

  final public void readShots(GameMode mode) throws ParseException {
  List<List<KindShot>> listShots; List<KindShot> list;
    listShots = new ArrayList<List<KindShot>>();
    list = readShotsAux();
    listShots.add(list);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      list = readShotsAux();
                                      listShots.add(list);
    }
    mode.setTotalShoots(listShots);
    {if (true) return;}
  }

  final public List<KindShot> readShotsAux() throws ParseException {
  KindShot kindShot; Token t; int n; List<KindShot> list;
    list = new ArrayList<KindShot>();
    label_6:
    while (true) {
      kindShot = readKindShot();
      t = jj_consume_token(NUM);
      n = Integer.parseInt(t.image);
      for (int i = 0; i < n; i++) {
        list.add(kindShot);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORMAL_SHOT:
      case INDESTRUCTIBLE_SHOT:
      case CAMERA_SHOT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public KindShot readKindShot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORMAL_SHOT:
      jj_consume_token(NORMAL_SHOT);
                    {if (true) return KindShot.NormalShot;}
      break;
    case INDESTRUCTIBLE_SHOT:
      jj_consume_token(INDESTRUCTIBLE_SHOT);
                            {if (true) return KindShot.IndestructibleShot;}
      break;
    case CAMERA_SHOT:
      jj_consume_token(CAMERA_SHOT);
                    {if (true) return KindShot.CameraShot;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void readTimeLimit(GameMode mode) throws ParseException {
  Token t, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNLIMITED:
      jj_consume_token(UNLIMITED);
                    mode.setTimeLimit(0);
      break;
    case NUM:
      t = jj_consume_token(NUM);
                  mode.setTimeLimit(Integer.parseInt(t.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        t2 = jj_consume_token(NUM);
                             mode.setTimeLimitAndPerTurn(Integer.parseInt(t.image), Integer.parseInt(t2.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          t3 = jj_consume_token(NUM);
                                   mode.setTimeLimitPerTurnExtra(Integer.parseInt(t.image), Integer.parseInt(t2.image), Integer.parseInt(t3.image));
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void bonusPlay(GameMode mode) throws ParseException {
  BonusPlay bonus; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIRST_BLOOD:
      jj_consume_token(FIRST_BLOOD);
      jj_consume_token(DDOT);
                             bonus = new BonusPlay(ConditionType.FirstBlood);
      readBonusPlay(bonus);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case KILL:
      jj_consume_token(KILL);
      jj_consume_token(DDOT);
                      bonus = new BonusPlay(ConditionType.Kill);
      readBonusPlay(bonus);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case DOUBLE_KILL:
      jj_consume_token(DOUBLE_KILL);
      jj_consume_token(DDOT);
                             bonus = new BonusPlay(ConditionType.DoubleKill);
      readBonusPlay(bonus);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case TRIPLE_KILL:
      jj_consume_token(TRIPLE_KILL);
      jj_consume_token(DDOT);
                             bonus = new BonusPlay(ConditionType.TripleKill);
      readBonusPlay(bonus);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case ULTRA_KILL:
      jj_consume_token(ULTRA_KILL);
      jj_consume_token(DDOT);
                            bonus = new BonusPlay(ConditionType.UltraKill);
      readBonusPlay(bonus);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case RAMPAGE:
      jj_consume_token(RAMPAGE);
      jj_consume_token(DDOT);
                         bonus = new BonusPlay(ConditionType.Rampage);
      readBonusPlay(bonus);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case NO_WATER_IN_A_ROW:
      jj_consume_token(NO_WATER_IN_A_ROW);
      t = jj_consume_token(NUM);
      jj_consume_token(DDOT);
                                               bonus = new BonusPlay(ConditionType.NoWaterInARow, Integer.parseInt(t.image));
      readBonusPlay(bonus);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case KILLING_SPREE:
      jj_consume_token(KILLING_SPREE);
      jj_consume_token(DDOT);
                               bonus = new BonusPlay(ConditionType.KillingSpree);
      readBonusPlay(bonus);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case DOMINATING:
      jj_consume_token(DOMINATING);
      jj_consume_token(DDOT);
                            bonus = new BonusPlay(ConditionType.Dominating);
      readBonusPlay(bonus);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case MEGA_KILL:
      jj_consume_token(MEGA_KILL);
      jj_consume_token(DDOT);
                           bonus = new BonusPlay(ConditionType.MegaKill);
      readBonusPlay(bonus);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case UNSTOPPABLE:
      jj_consume_token(UNSTOPPABLE);
      jj_consume_token(DDOT);
                             bonus = new BonusPlay(ConditionType.Unstoppable);
      readBonusPlay(bonus);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case WICKED_SICK:
      jj_consume_token(WICKED_SICK);
      jj_consume_token(DDOT);
                             bonus = new BonusPlay(ConditionType.WickedSick);
      readBonusPlay(bonus);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case MONSTER_KILL:
      jj_consume_token(MONSTER_KILL);
      jj_consume_token(DDOT);
                              bonus = new BonusPlay(ConditionType.MonsterKill);
      readBonusPlay(bonus);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case GODLIKE:
      jj_consume_token(GODLIKE);
      jj_consume_token(DDOT);
                         bonus = new BonusPlay(ConditionType.Godlike);
      readBonusPlay(bonus);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    case HOLY_SHIT:
      jj_consume_token(HOLY_SHIT);
      jj_consume_token(DDOT);
                           bonus = new BonusPlay(ConditionType.HolyShit);
      readBonusPlay(bonus);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        readBonusPlay(bonus);
      }
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    mode.addPossibleBonus(bonus);
  }

  final public void readBonusPlay(BonusPlay bonus) throws ParseException {
  Token t; List<KindShot> list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTRA_TURN:
      jj_consume_token(EXTRA_TURN);
      jj_consume_token(LPAR);
      list = readShotsAux();
      jj_consume_token(RPAR);
                                                           bonus.addAction(new GameBonus.ExtraTurn(list));
      break;
    case EXTRA_TIME:
      jj_consume_token(EXTRA_TIME);
      jj_consume_token(LPAR);
      t = jj_consume_token(NUM);
      jj_consume_token(RPAR);
                                                 bonus.addAction(new GameBonus.ExtraTime(Integer.parseInt(t.image)));
    {if (true) return;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ships(GameMode mode) throws ParseException {
  Token t; int shipId, explosive; List<Double> shieldList;
  List<KindShot> eachAliveShots, anyAliveShots, eachDeadShots, allDeadShots;
    t = jj_consume_token(ID);
    jj_consume_token(DDOT);
    shipId = ShipClass.getId(t.image);
    shieldList = new ArrayList<Double>();
    explosive = 0;
    eachAliveShots = new ArrayList<KindShot>();
    anyAliveShots = new ArrayList<KindShot>();
    eachDeadShots = new ArrayList<KindShot>();
    allDeadShots = new ArrayList<KindShot>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHIELD:
      jj_consume_token(SHIELD);
      jj_consume_token(LPAR);
      t = jj_consume_token(DECIMAL);
                        shieldList.add(Double.parseDouble(t.image));
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(DECIMAL);
                                    shieldList.add(Double.parseDouble(t.image));
      }
      jj_consume_token(RPAR);
      break;
    case EXPLOSIVE:
      jj_consume_token(EXPLOSIVE);
      jj_consume_token(LPAR);
      t = jj_consume_token(NUM);
      jj_consume_token(RPAR);
                             explosive = Integer.parseInt(t.image);
      break;
    case EACH_ALIVE_SHOTS:
      jj_consume_token(EACH_ALIVE_SHOTS);
      jj_consume_token(LPAR);
      eachAliveShots = readShotsAux();
      jj_consume_token(RPAR);
      break;
    case ANY_ALIVE_SHOTS:
      jj_consume_token(ANY_ALIVE_SHOTS);
      jj_consume_token(LPAR);
      anyAliveShots = readShotsAux();
      jj_consume_token(RPAR);
      break;
    case EACH_DEAD_SHOTS:
      jj_consume_token(EACH_DEAD_SHOTS);
      jj_consume_token(LPAR);
      eachDeadShots = readShotsAux();
      jj_consume_token(RPAR);
      break;
    case ALL_DEAD_SHOTS:
      jj_consume_token(ALL_DEAD_SHOTS);
      jj_consume_token(LPAR);
      allDeadShots = readShotsAux();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIELD:
        jj_consume_token(SHIELD);
        jj_consume_token(LPAR);
        t = jj_consume_token(DECIMAL);
                          shieldList.add(Double.parseDouble(t.image));
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_24;
          }
          jj_consume_token(COMMA);
          t = jj_consume_token(DECIMAL);
                                      shieldList.add(Double.parseDouble(t.image));
        }
        jj_consume_token(RPAR);
        break;
      case EXPLOSIVE:
        jj_consume_token(EXPLOSIVE);
        jj_consume_token(LPAR);
        t = jj_consume_token(NUM);
        jj_consume_token(RPAR);
                               explosive = Integer.parseInt(t.image);
        break;
      case EACH_ALIVE_SHOTS:
        jj_consume_token(EACH_ALIVE_SHOTS);
        jj_consume_token(LPAR);
        eachAliveShots = readShotsAux();
        jj_consume_token(RPAR);
        break;
      case ANY_ALIVE_SHOTS:
        jj_consume_token(ANY_ALIVE_SHOTS);
        jj_consume_token(LPAR);
        anyAliveShots = readShotsAux();
        jj_consume_token(RPAR);
        break;
      case EACH_DEAD_SHOTS:
        jj_consume_token(EACH_DEAD_SHOTS);
        jj_consume_token(LPAR);
        eachDeadShots = readShotsAux();
        jj_consume_token(RPAR);
        break;
      case ALL_DEAD_SHOTS:
        jj_consume_token(ALL_DEAD_SHOTS);
        jj_consume_token(LPAR);
        allDeadShots = readShotsAux();
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
    if(t.image.equals("All")) {
      for (int id = 0; id < ShipClass.numberOfShips(); id++) {
        mode.addShipExtraInfo(id, eachAliveShots, anyAliveShots, eachDeadShots, allDeadShots, explosive, shieldList);
      }
    } else if(shipId != -1) {
        mode.addShipExtraInfo(shipId, eachAliveShots, anyAliveShots, eachDeadShots, allDeadShots, explosive, shieldList);
    }
  }

  /** Generated Token Manager. */
  public ParserGameModesTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x100000,0xe4200000,0x18000000,0x0,0x0,0xe4200000,0x1000,0x1c00000,0x1c00000,0x1000,0x1000,0x0,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000000,0x8000000,0x80002,0x0,0x7fff0,0x8000000,0x80002,0x0,0x0,0x0,0x0,0x0,0x4000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fff0,0xc,0x0,0x3f00000,0x0,0x0,0x3f00000,};
   }

  /** Constructor with InputStream. */
  public ParserGameModes(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserGameModes(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserGameModesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserGameModes(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserGameModesTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserGameModes(ParserGameModesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserGameModesTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
